=================================================NODEJS EXPRESS MONGODOB ===============================================================

[1]. what is Node js ?
---------------------==->
Node.js is an open-source, cross-platform, server-side runtime environment that allows developers to build
 scalable and high-performance applications. It is built on Chrome's V8 JavaScript engine and written in C++.
========================>
[2]. what can Node.js Do ?
------------------------>
A). Nodejs can generate dynamic page content.
    and it can create , open , read , write , delete , and close file on server.
B)NOdejs can collect form data and it can add , delete , modify data in your database,
========================>
[3] . Diffrence between syncronous(blocking) code and asyncronous(non blocking) code?
------------------------>
      example of syncronous(blocking) code
     const fs = require('fs')
     const txt = fs.readFileSync('../nodejs.txt' , 'utf-8')
     console.log(txt);
      example of asyncronous(non-blocking code)
      const fs = require('fs')
     const txt = fs.readFileSync('../nodejs.txt' , 'utf-8' , (err ,data) => {
        console.log(data)
     })
     by using callback function
     console.log(txt);
=========================>
[4]. what is server ?
------------------------->
As by semantic meaning of server is to serve.
It is a computer software that provides resources , data , service , program to other computer known as client.
=========================>
[5]. diffrence between HTTP and HTTPS ?
------------------------->
HTTP (Hypertext Transfer Protocol) and HTTPS (Hypertext Transfer Protocol Secure)
are two protocols used for communication over the internet, particularly when accessing websites
A)Security:
HTTP: It operates over an unencrypted connection, meaning that the data transmitted between 
 user's browser and the web server is not secured.
HTTPS: It incorporates SSL/TLS (Secure Sockets Layer/Transport Layer Security) encryption, 
providing a secure and encrypted connection between the user's browser and the web server.
B)Authentication:
HTTP: It does not provide any form of server authentication, while HTTPS provide a level of 
authentication, confirming the identity of the website's server. 
C)URL Format:
HTTP: URLs begin with "http://" in the address bar of the browser.
HTTPS: URLs begin with "https://" in the address bar of the browser.
==========================>
[5]. what is Express ?
-------------------------->
 Express.js is a popular web application framework for Node.js, designed for building web applications and APIs.
  It provides a set of tools and utilities to handle various tasks related to web development, 
  such as routing, handling HTTP requests and responses, managing middleware, and serving static files.
  the main feature of express that it makes it easier to organise our application in to the mvc architecture.
[6]. what is MVC Structure/architect in express ?
-------------------------->
MVC (Model-View-Controller) is a software architectural pattern commonly used in web development,
 including Express.js applications. It helps in organizing the codebase and separating concerns into 
 three main components: Model, View, and Controller. Here's a brief explanation of each component in 
 the context of an Express.js application:
Model:
The Model represents the data and business logic of the application. It handles the interaction with
 the database and defines the structure and behavior of the data. In an Express.js application, 
 the Model is responsible for querying the database, performing CRUD operations, and validating data.
View:
The View is responsible for the presentation layer of the application. It deals with the user interface
and rendering the data to the client's browser. In Express.js, the View is typically implemented using
 a templating engine like EJS (Embedded JavaScript) or Pug (formerly Jade). These templating engines
  allow you to dynamically generate HTML pages with data from the server.
Controller:
The Controller acts as an intermediary between the Model and the View. It handles incoming requests 
from the client, processes the data using the Model, and then passes the results to the appropriate
 View for rendering. In an Express.js application, the Controller defines the various routes and their
corresponding callback functions that handle the HTTP requests and responses.

==========================>
[7].what is mongoose ?
-------------------------->
 Mongoose is an Object Data Modeling (ODM) library for MongoDB in Node.js. It provides a straightforward
   and schema-based solution to interact with MongoDB databases. 
   Mongoose makes it easier by providing a set of rules (schema) that define how the data should look. It's
  like a blueprint for how the data should be organized. With this blueprint, you can create, read, update, 
  and delete data easily using simple JavaScript commands.
==========================>
[8]. Explain Model and Schema define in mongoose(ODM)?
-------------------------->
Schema => In Mongoose, a "Schema" is a blueprint that defines the structure of documents in a MongoDB collection.
 It acts as a template or a set of rules that determine the shape of data stored in the database. 
 When you create a new document.The Schema defines the fields (also known as properties or keys) that each document 
 can have and specifies the data types, default values, validation rules, and other options for each field.
 -------------------------->
 Model => In Mongoose, a "Model" is a constructor compiled from a Schema. It represents a specific collection in the
  MongoDB database and provides an interface to interact with that collection. The Model allows you to create, read,
  update, and delete documents in the associated MongoDB collection using JavaScript objects and methods provided by Mongoose.
  ----Or-->
 A model is like blueprint that is used to create document. like in js we create object in js by using class.
A Mongoose model is a wrapper of the Mongoose schema. A Mongoose schema defines the document's properties, default values,
 types of data, validators, etc. In contrast, a Mongoose model provides an interface for the database to create, query, update,
  delete records, and so on.
==============================>
[9]. how many datatypes in mongodb ?
------------------------------>
 1.String
 2.Number
 3.Boolean
 4.Object
 5.Array
 6.Date
 7.ObjectId
 8.Null
 9.Undefined
===============================>
[10]. write and explain important querymongoose function used for crud in mongoDB ?
------------------------------->
a) CREATE :  "Model.create()"
 This function is used to create and insert new documents into the
 MongoDB collection. It takes an object representing the data for the new document as
  an argument and returns a Promise that resolves to the newly created document.
  example
  const newUser = {
  name: 'John Doe',
  email: 'john@example.com',
  age: 30,
};
User.create(newUser)
  .then((createdUser) => {
    console.log(createdUser);
  })
  .catch((error) => {
    console.error(error);
  });
------------>
b)READ: "Model.find()/Model.find({querycondition})"
 This function is used to retrieve multiple documents that match a query condition.
 if there is no condition then it give all documents.
 It returns a Query object that can be further chained with other query 
 functions or executed using "".exec()""
 example
 // Find all users with age greater than or equal to 25
User.find({ age: { $gte: 25 } })
  .then((users) => {
    console.log(users);
  })
  .catch((error) => {
    console.error(error);
  });
  [---]. what is .exec() does ?
  In Mongoose, the .exec() method is used to execute a Mongoose query and return a Promise that
   resolves to the result of the query. It is typically used at the end of a query chain to actually 
   trigger the database operation.
   example
   const query = Product.find({ inStock: true }).sort('price');

// Executing the query using .exec()
query.exec()
  .then((products) => {
    console.log(products);
  })
  .catch((error) => {
    console.error(error);
  });
------------>
c)READ:"Model.findOne()"
 This function retrieves the first document that matches the query
  condition. It returns a single document or null if no matching document is found.
  example
   User.findOne({ email: 'john@example.com' })
  .then((user) => {
    console.log(user);
  })
  .catch((error) => {
    console.error(error);
  });
------------>
d)UPDATE ONE/MANY :"Model.updateOne() / Model.updateMany()"
 These functions update one or multiple documents thatmatch the query condition with the 
 specified update data. updateOne() updates the first matching document, while updateMany()
  updates all matching documents.
  ---similar model.updateOne()---
  If you want to update a document in Mongoose using its _id, you can use the
   Model.findByIdAndUpdate() function. This function is specifically designed for updating
    a document based on its _id.
  example
  // Update a user's age by email
User.updateOne({ email: 'john@example.com' }, { age: 31 })
  .then((result) => {
    console.log(result); // { n: 1, nModified: 1, ok: 1 }
  })
  .catch((error) => {
    console.error(error);
  });
-------------->
e)DELETE: "Model.deleteOne() / Model.deleteMany()"
 These functions remove one or multiple documents that match the query condition.
 example
 // Delete a user by email
User.deleteOne({ email: 'john@example.com' })
  .then((result) => {
    console.log(result); // { n: 1, deletedCount: 1, ok: 1 }
  })
  .catch((error) => {
    console.error(error);
  });
  ===============================>
  [11]. 


=====================>
1.how Node js it differ from traditional server-side languages like PHP or Java?
1. What is Node.js, and how does it differ from traditional server-side languages like PHP or Java?
2. How do you handle asynchronous operations in Node.js?
3. What are callbacks in Node.js? How can you avoid callback hell?
4. Explain the concept of the event loop in Node.js.
5. What is the purpose of the `package.json` file in Node.js projects?
6. How can you manage dependencies in Node.js?
7. What is the significance of the `npm` (Node Package Manager) in the Node.js ecosystem?
8. How do you handle errors in Node.js applications?
9. What are streams in Node.js, and how do they help in efficient data processing?
10. Explain the role of the `fs` module in Node.js and provide an example of reading from and writing to a file.
11. What is Express.js, and how does it simplify the development of web applications with Node.js?
12. How do you handle user authentication and sessions in Node.js applications?
13. What is middleware in the context of Express.js? Give an example of how to use middleware in an Express application.
14. How do you deploy Node.js applications in a production environment?
15. Explain the concept of clustering in Node.js and its benefits.
16. What is the purpose of the `child_process` module in Node.js, and when would you use it?
17. How can you implement real-time functionality in Node.js applications?
18. What are WebSockets, and how do they differ from traditional HTTP communication?
19. How do you conduct unit testing in a Node.js application?
20. What are some popular frameworks and libraries available for Node.js, and when would you use them?

Remember that the depth of the questions can vary based on the candidate's level of experience, so tailor your questions accordingly. Additionally, it's essential to assess not only theoretical knowledge but also practical experience and problem-solving skills.